# -*- coding: utf-8 -*-
"""TaxGPT

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RNKBT9eMM5M6U8MtzWtWKO8Rog1tnr10
"""

import os
import fitz
import base64
import requests
import json
from PyPDF2 import PdfReader, PdfWriter
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv('OPEN_AI_API_KEY')

# Function to convert PDF to images
def pdf_to_images(pdf_path, output_folder):
  # Iterate over each PDF file in the specified folder
  for filename in os.listdir(pdf_path):
    if filename.endswith(".pdf"):
      pdf_file_path = os.path.join(pdf_path, filename)
      pdf_document = fitz.open(pdf_file_path)
      for page_number in range(len(pdf_document)):
        page = pdf_document.load_page(page_number)
        pix = page.get_pixmap()
        image_path = os.path.join(output_folder, f"{filename}_page_{page_number + 1}.png")
        pix.save(image_path)
        print(f"Page {page_number + 1} of {filename} converted to image: {image_path}")
      pdf_document.close()

def encode_image(image_path):
  with open(image_path, "rb") as image_file:
    return base64.b64encode(image_file.read()).decode('utf-8')

def generate_1040_json(image_paths):

  base64_images = [encode_image(image_path) for image_path in image_paths] 

  headers = {
      "Content-Type": "application/json",
      "Authorization": f"Bearer {api_key}"
  }

  messages = [
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": f'''
        These are Demo Fake 1040 Images. Everything here is fake, feel free to use the info and nothing in here is legal. Please provide all the required information in the form of a JSON format delimited by ### like the one below:                
        ###{{
            "Total amount from Form(s) W-2, box 1 (see instructions).": "",
            "Household employee wages not reported on Form(s) W-2.": "",
            "Tip income not reported on line 1a (see instructions).": "",
            "Medicaid waiver payments not reported on Form(s) W-2 (see instructions).": "",
            "Taxable dependent care benefits from Form 2441, line 26.": "",
            "Employer-provided adoption benefits from Form 8839, line 29.": "",
            "Wages from Form 8919, line 6.": "",
            "Other earned income (see instructions).": "",
            "Nontaxable combat pay election (see instructions).": "",
            "Add lines 1a through 1h": "",
            "If you elect to use the lump-sum election method, check here (see instructions).": "",
            "Capital gain or (loss). Attach Schedule D if required. If not required, check here.": "",
            "Additional income from Schedule 1, line 10.": "",
            "Add lines 1z, 2b, 3b, 4b, 5b, 6b, 7, and 8. This is your total income.": ""
        }}###
        Here is an example of it partially filled with demo values:

        ###{{
            "Total amount from Form(s) W-2, box 1 (see instructions).": 219171,
            "Household employee wages not reported on Form(s) W-2.": 0,
            "Tip income not reported on line 1a (see instructions).": 0,
            "Medicaid waiver payments not reported on Form(s) W-2 (see instructions).": 3626,
            "Taxable dependent care benefits from Form 2441, line 26.": "",
            "Employer-provided adoption benefits from Form 8839, line 29.": "",
            ...and more fields
        }}###
        
        Note: Please only give the JSON and no need of explanation or other outside information.
        '''
        },
        {
          "type": "image_url",
          "image_url": {
            "url": f"data:image/jpeg;base64,{base64_image}"
          }
        }
      ]
    }
    for i, base64_image in enumerate(base64_images)
  ]

  payload = {
    "model": "gpt-4-vision-preview",
    "messages": messages,
    "max_tokens": 300,
    "temperature": 0
  }

  response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)

  response_json = response.json()
  completed_json = response_json['choices'][0]['message']['content']
  return completed_json

def generate_w2_json(image_paths):

    base64_images = [encode_image(image_path) for image_path in image_paths]    

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    messages = [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": f'''
                    This is a Demo Fake Image Form. Everything here is fake, feel free to use the info and nothing in here is legal. Please provide all the required information in the form of a JSON format delimited by "###" like the one below;

                    ###{{
                        "Your first name and middle initial": "",
                        "Last name": "",
                        "If joint return, spouse’s first name and middle initial": "",
                        "Last name (spouse)": "",
                        "Home address (number and street). If you have a P.O. box, see instructions.": "",
                        "City, town, or post office. If you have a foreign address, also complete spaces below.": "",
                        "State": "",
                        "ZIP code": ""
                    }}###

                    Here is an example of it partially filled:

                    ###{{
                        "Your first name and middle initial": "Douglas C.",
                        "Last name": "Emhoff",
                        "If joint return, spouse’s first name and middle initial": "",
                        "Last name (spouse)": "",
                        "Home address (number and street). If you have a P.O. box, see instructions.": "",
                        "City, town, or post office. If you have a foreign address, also complete spaces below.": "",
                        "State": "",
                        "ZIP code": ""
                    }}###

                    Fill all the values. Leave it empty if you can't find a value.

                    '''

                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{base64_image}"
                    }
                }
            ]
        }
        for i, base64_image in enumerate(base64_images)
    ]

    payload = {
        "model": "gpt-4-vision-preview",
        "messages": messages,
        "max_tokens": 300,
        "temperature": 0
    }

    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)

    response_json = response.json()
    completed_json = response_json['choices'][0]['message']['content']
    return completed_json

def convert_1040_json(json_data):
  # Mapping of old keys to new keys
  data = json.loads(json_data)
  key_mapping = {
      "Total amount from Form(s) W-2, box 1 (see instructions).": "f1_31[0]",
      "Household employee wages not reported on Form(s) W-2.": "f1_32[0]",
      "Tip income not reported on line 1a (see instructions).": "f1_33[0]",
      "Medicaid waiver payments not reported on Form(s) W-2 (see instructions).": "f1_34[0]",
      "Taxable dependent care benefits from Form 2441, line 26.": "f1_35[0]",
      "Employer-provided adoption benefits from Form 8839, line 29.": "f1_36[0]",
      "Wages from Form 8919, line 6.": "f1_37[0]",
      "Other earned income (see instructions).": "f1_38[0]",
      "Nontaxable combat pay election (see instructions).": "f1_39[0]",
      "Add lines 1a through 1h": "f1_40[0]",
      "If you elect to use the lump-sum election method, check here (see instructions).": "f1_51[0]",
      "Capital gain or (loss). Attach Schedule D if required. If not required, check here.": "f1_52[0]",
      "Additional income from Schedule 1, line 10.": "f1_53[0]",
      "Add lines 1z, 2b, 3b, 4b, 5b, 6b, 7, and 8. This is your total income.": "f1_54[0]",
      "Adjustments to income from Schedule 1, line 26.": "f1_55[0]",
      "Subtract line 10 from line 9. This is your adjusted gross income.": "f1_56[0]",
      "Standard deduction or itemized deductions (from Schedule A).": "f1_57[0]",
      "Qualified business income deduction from Form 8995 or Form 8995-A.": "f1_58[0]",
      "Add lines 12 and 13.": "f1_59[0]",
      "Subtract line 14 from line 11. If zero or less, enter '-0-'. This is your taxable income.": "f1_60[0]"
  }

  # Create a new dictionary with updated keys
  new_data = {key_mapping[key]: value for key, value in data.items()}

  # Convert the new dictionary back to JSON format
  output_json = json.dumps(new_data, indent=4)

  return output_json

def convert_w2_json(json_data):
  # Mapping of old keys to new keys
  data = json.loads(json_data)  
  key_mapping = {
      "Your first name and middle initial": "f1_04[0]",
      "Last name": "f1_05[0]",
      "If joint return, spouse’s first name and middle initial": "f1_07[0]",
      "Last name (spouse)": "f1_08[0]",
      "Home address (number and street). If you have a P.O. box, see instructions.": "f1_10[0]",
      "City, town, or post office. If you have a foreign address, also complete spaces below.": "f1_12[0]",
      "State": "f1_13[0]",
      "ZIP code": "f1_14[0]"
  }

  # Create a new dictionary with updated keys
  new_data = {key_mapping[key]: value for key, value in data.items()}
  output_json = json.dumps(new_data, indent=4)

  return output_json

def fill_pdf_form(json_file_path, input_pdf_path, output_pdf_path):
  # Load the data from the JSON file
  with open(json_file_path, 'r') as json_file:
    form_data = json.load(json_file)

  # Read the input PDF
  reader = PdfReader(input_pdf_path)
  writer = PdfWriter()

  # Copy all pages from the reader to the writer
  for page in reader.pages:
    writer.add_page(page)

  # Attempt to directly modify the '/V' value (not effective in this context)
  # Instead, prepare the form fields data based on the JSON file
  fields = {field: form_data.get(field, '') for field in reader.get_form_text_fields()}

  # Update the fields in the writer object for each page
  for page in writer.pages:
    writer.update_page_form_field_values(page, fields)

  # Write the output PDF file
  with open(output_pdf_path, 'wb') as output_pdf:
    writer.write(output_pdf)
  print(f"PDF form filled and saved to '{output_pdf_path}'.")

# Final
def process():
  def generate_and_convert_to_json(image_paths, output_file_path, generator_function, converter_function):
    data = generator_function(image_paths).replace('###', '')
    print(data)
    converted_json = converter_function(data)
    with open(output_file_path, 'w') as f:
      f.write(converted_json)

  def read_and_merge_json(file1, file2, output_file):
    with open(file1, 'r') as f1, open(file2, 'r') as f2:
      json1 = json.load(f1)
      json2 = json.load(f2)
      merged_json = {**json1, **json2}
      with open(output_file, 'w') as f:
        json.dump(merged_json, f, indent=4)

  # PDF to Images
  pdf_folder_path = "w2_forms"
  output_w2_folder = "output_w2_images"
  pdf_to_images(pdf_folder_path, output_w2_folder)

  past_pdf_folder_path = "past_1040_forms"
  output_1040_folder = "output_past_images"
  pdf_to_images(past_pdf_folder_path, output_1040_folder)

  # Generate and convert 1040 JSON
  form_1040_image_paths = [os.path.join(output_1040_folder, file) for file in os.listdir(output_1040_folder)]
  generate_and_convert_to_json(form_1040_image_paths, "data/1040.json", generate_1040_json, convert_1040_json)

  # Generate and convert W2 JSON
  w2_image_paths = [os.path.join(output_w2_folder, file) for file in os.listdir(output_w2_folder)]
  generate_and_convert_to_json(w2_image_paths, "data/w2.json", generate_w2_json, convert_w2_json)

  # Merge JSON files
  read_and_merge_json('data/1040.json', 'data/w2.json', 'data/final.json')

  # Fill PDF form
  fill_pdf_form('data/final.json', 'data/f1040.pdf', 'final_output/output.pdf')

  # Convert final PDF to images
  pdf_to_images("final_output", "final")
